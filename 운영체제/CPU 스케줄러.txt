1. FCFS (First Come First Served)
	- 먼저 온 순서대로 처리
	- 비선점형 스케줄링
	
	- 단점
		> 소요시간이 긴 프로세스가 먼저 도달하면 효율성이 낮아진다.
		
2. SJF(Shortest Job First)
	- 다른 프로세스가 먼저 도착했어도 CPU burst time 이 짧은 프로세스에게 선 할당.
	- 비선점형 스케줄링
	
	- 단점
		> 지속적으로 CPU burst time이 짦은 프로세스가 도착할 경우 상대적으로 긴 프로세스의 처리가 안될 수 있음.
		
3. SRT(Shortest Remaining time First)
	- 새로운 프로세스가 도착할 때마다 새로운 스케줄링이 이루어진다.
	- 선점형 스케줄링
		> 현재 수행 중인 프로세스의 남은 burst time 보다 더 짧은 CPU burst time 을 가지는 새로운 프로세스가 도착하면 교체.
	
	- 단점
		> 지속적으로 CPU burst time이 짧은 프로세스가 도착할 경우 상대적으로 긴 프로세스의 처리가 안될 수 있음.
		> 새로운 프로세스가 도달할 때마다 스케줄링을 다시하기 때문에 CPU Burst time을 측정할 수 없다.
		
4. Priority Scheduling
	- 우선 순위가 가장 높은 프로세스에게 CPU를 할당하는 스케줄링.
		> 정수로 표현한 우선 순위 중 작은 숫자가 우선 순위가 높다.
	- 선점형 스케줄링
		> 더 높은 우선 순위의 프로세스가 도착하면 실행 중인 프로세스를 멈추고 CPU를 선점한다.
	- 비선점형 스케줄링 방식
		> 더 높은 우선 순위의 프로세스가 도착하면 Ready Queue의 Head에 넣는다.
		
	- 단점
		> 우선 순위가 낮은 프로세스라도 오래 기다리면 우선 순위를 높여줘야 함.
		
5. Round Robin
	- 현대적인 CPU 스케줄링
	- 각 프로세스는 동일한 크기의 할당 시간을 갖게 된다.
	- 할당 시간이 지나면 프로세스는 선점당하고 Ready Queue의 제일 뒤에 넣는다.
	- CPU 사용시간이 랜덤한 프로세스들이 섞여있을 경우에 효율적
	- Round Robin이 가능한 이유는 프로세스의 Context를 저장할 수 있기 때문이다.
	
	- 장점
		1) Response time이 빨라진다.
		2) 프로세스가 기다리는 시간이 CPU를 사용할 만큼 증가한다.
			> 공정한 스케줄링
		
		