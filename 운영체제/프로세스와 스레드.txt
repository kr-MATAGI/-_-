1. 프로세스
	- 실행 중인 프로그램
	- 디스크로부터 메모리에 적재되어 CPU의 할당을 받을 수 있는 것
	- 운영체제로부터 주소 공간, 파일, 메모리 등을 할당 받으며 이것들을 총칭하여 프로세스라고 한다.
	- 함수의 매개변수, 복귀 주소와 로컬변수와 같은 임시 자료를 갖는 프로세스 스택과 전역 변수들을 수록하는 데이터 섹션.
	- 프로세스는 프로세스 실행 중에 동적으로 할당되는 메모리인 힙을 포함.
	
	- PCB
		- 프로세스에 대한 중요한 정보를 저장하고 있음.
		- 운영체제는 프로세스를 관리하기 위해 프로세스의 생성과 동시에 고유한 PCB를 생성.
		- 저장되는 정보
			> PID, 프로세스 상태, 프로그램 카운터(다음에 실행할 명령어의 주소)
			CPU레지스터, CPU 스케쥴링 정보, 메모리 관리 정보, 입출력 상태 정보, 어카운팅 정보
			
2. 스레드
	- 프로세스의 실행 단위
	- 한 프로세스 내에서 동작되는 여러 실행 흐름으로 프로세스 내의 주소 공간이나 자원을 공유할 수 있다.
	- 스레드 ID, 프로그램 카운터, 레지스터 집합, 스택으로 구성된다.
	
	- 멀티 스레딩
		> 하나의 프로세스를 다수의 실행 단위로 구분하여 자원을 공유하고
		자원의 생성과 관리의 중복성을 최소화하여 수행 능력을 향상 시키는 것.
		> 이 경우 각각의 스레드는 독립적인 작업을 수행해야하기 때문에 각자의 스택과 PC 레지스터 값을 가지고 있다.
		
	- 멀티 스레딩의 장점
		1) 프로세스를 이용하여 동시에 처리하던 일을 스레드로 구현할 경우 메모리 공간과 시스템 자원 소모가 줄어들게 된다.
		2) 스레드 간의 통신이 필요한 경우에도 별도의 자원을 이용하는 것이 아니라
		  동적으로 할당된 공간인 Heap 영역을 이용하여 데이터를 주고 받을 수 있다.
		  (프로세스 간 통신 방법에 비해 스레드 간의 통신 방법이 훨씬 간단하다.)
		3) 스레드의 context switch는 프로세스 context switch와는 달리 캐시 메모리를 비울 필요가 없기에 더 빠르다.
			> 시스템의 throughput이 향상되고 자원 소모가 줄어듦 -> 프로그램 응답 시간이 단축.
			
	- 멀티 스레딩의 문제점
		1) 멀티 프로세스는 프로세스 간 공유하는 자원이 없기 때문에 동일한 자원에 동시 접근 하는 일이 없지만
		멀티 스레딩은 서로 다른 스레드가 데이터와 힙 영역을 공유하기 때문에 어떤 스레드가 다른 스레드에서 사용 중인
		변수나 자료구조에 접근하여 엉뚱한 값을 읽어오거나 수정할 수 있다.
		
		2) 위 때문에 동기화 작업이 필요하다.
		 동기화를 통해 작업 처리 순서를 컨트롤하고 공유 자원에 대한 접근을 컨트롤 하는 것.
		 하지만 이로 인해 병목 현상이 발생하여 성능이 저하될 가능성이 높다.
			> 과도한 락으로 인한 병목현상을 줄여야 한다.
			
			
3. 멀티 스레드 vs 멀티 프로세스
	- 멀티 스레드는 멀티 프로세스보다 적은 메모리 공간을 차지하고 문맥 전환이 빠르지만
	 오류로 인해 하나의 스레드가 종료되면 전체 스레드가 종료될 수 있다는 점과 동기화의 문제점이 있다.
	
	- 멀티 프로세스 방식은 하나의 프로세스가 죽더라도 다른 프로세스에는 영향을 끼치지 않고 정상적으로 수행된다.
	하지만, 많은 메모리 공간과 CPU 시간을 차지한다는 단점이 존재한다.