<소프트웨어 개발 방법론_1>

1. 구조적 방법론
	- Divide and Conquer 원리 적용
		타당성 검토 -> 계획 -> 요구사항 분석 -> 설계 -> 구현 -> 시험 -> 운용/수지 보수
	
2. 정보공학 방법론
	- 대규모 정보시스템 구축에 적합
		정보 전략 계획 수립 -> 업무 영역 분석 -> 업무 시스템 설계 -> 업무 시스템 구축
		
3. 객체지향 방법론
	- 구조적 기법의 해결책
		요구사항 분석 -> 설계 -> 구현 -> 테스트 및 검증 -> 인도
		
4. 컴포넌트 기반(CBD) 방법론
	- 컴포넌트의 재사용이 가능하여 시간, 노력, 비용을 절감하고 품질을 높임
		개발 준비 -> 분석 -> 설계 -> 구현 -> 테스트 -> 전개 -> 인도
		
5. 애자일 방법론
	- 고객의 요구사항 변화에 빠르고 유연하게 대응하도록 일정한 주기를 반복하면서 개발 과정을 진행하는 방법론
		사용자 요구사항 -> (반복) [ 계획 -> 개발 -> 승인 테스트 ]
		
		
6. 소프트웨어 비용 결정 요소
	- 프로젝트 요소 : 제품 복잡도, 시스템 크기, 요구되는 신뢰도
	- 자원 요소 : 인적 자원, 하드웨어 자원, 소프트웨어 자원
	- 생산성 요소 : 개발자 능력, 개발 기간
	
7. 하향식 산정 기법
	- 과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정
	- 전문가 감정 기법
		> 조직 내 경험이 많은 두 명 이상의 전문가에게 비용 산정을 의뢰
	- 델파이 기법
		> 많은 전문가의 여러 의견을 종합하여 산정
		> 한 명의 조정자와 여러 전문가로 구성
		
8. 상향식 산정 기법
	- 프로젝트의 세부적인 작업 단위별로 비용을 산정 후 집게하여 전체 비용을 산정
	- LOC(source line of code) 기법
		> 노력(인월) = 개발 기간 * 투입 인원 = LOC / 1인당 월평균 생산 코드 라인 수
		> 개발 비용 = 노력(인월) * 단위 비용(1인당 월평균 인건비)
		> 생산성 = LOC / 노력(인월)
		
9. COCOMO 모형
	- LOC에 의한 비용 산정 기법
	- 개발 유형
		> 소프트웨어의 복잡도 또는 원시 프로그램의 규모에 따라 분류
		1) 조직형 : 5만 라인 이하
		2) 반분리형 : 30만 라인 이하
		3) 분리형 : 30만 라인 이상
	- 모형의 종류
		> 비용 산정 단계 및 적용 변수의 구체화 정도로 구분
		1) 기본형 : 소프트웨어 크기와 개발 유형만을 이용하여 비용을 산정
		2) 중간형 : 기본형의 공식을 이용하거나 4가지 특성의 15가지 요인에 의해 비용을 산정
			제품의 특성 : 요구되는 신뢰도, 데이터베이스의 크기, 제품의 복잡도
			컴퓨터의 특성 : 수행 시간의 제한, 기억 장소의 제한, 가상 기계의 안정성, 반환 시간
			개발 요원의 특성 : 분석가의 능력, 개발 분야의 경험, 가상 기계의 경험, 프로그래머의 능력, 프로그래밍 언어의 경험
			프로젝트 특성 : 소프트웨어 도구의 이용, 프로젝트 개발 일정, 최신 프로그래밍 기법 이용
		3) 발전형 : 개발 공정별로 보다 자세하고 정확하게 노력을 산출하여 비용을 산정.
		
10. Putnam 모형
	- 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정해주는 모형
	- 생명 주기 예측 모형
	- SLIM : Rayleigh-Norder 곡선과 Putnam 예측 모델을 기초로하여 개발된 자동화 측정 도구
	
11. 기능 점수(FP) 모형
	- 소프트웨어 기능을 증대시키는 요인별로 가중치를 부여하고 합산하여 총 기능 점수를 산출하며
	총 기능 점수와 영향도를 이용하여 기능 점수를 구한 후 이를 이용해서 비요을 산정
		