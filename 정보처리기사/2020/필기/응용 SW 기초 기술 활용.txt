<응용 SW 기초 기술 활용>

1. 운영체제
	- 컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임
	
		사용자 - 응용 프로그램 - 유틸리티 - 운영체제 - 하드웨어

2. 운영체제의 목적
	- 처리 능력 향상, 사용 가능도 향상, 신뢰도 향상, 반환 식나 단축
	- 운영체제의 성능을 평가하는 기준
		> 처리 능력 : 일정 시간 내에 시스템이 처리하는 양
		> 반환 시간(=응답 시간) : 시스템에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸리는 시간
		> 사용 가능도 : 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도
		> 신뢰도 : 주어진 문제를 정확하게 해결하는 정도
		
3. 운영체제의 기능
	- 프로세서, 기억장치, 입출력장치, 파일 및 정보 등의 자원 관리
	- 자원을 효율적으로 활용하기 위한 스케쥴링 기능 제공
	- 사용자와 시스템간 편리한 인터페이스 제공
	- 각종 하드웨어와 네트워크를 관리 제어
	- 데이터 관리, 데이터 및 자원의 공유 기능 제공
	- 시스템의 오류 검사 및 복구
	- 자원 보호 기능 제공
	- 입 출력에 대한 보조 기능 제공
	- 가상 계산기 기능 제공
	
4. 운영체제의 주요 자원 관리
	- 프로세스 관리 : 프로세스 스케쥴링 및 동기화 관리
	- 기억장치 관리 : 프로세스에게 메모리 할당 및 회수 관리
	- 주변장치 관리 : 입출력장치 스케쥴링 및 전반적인 관리
	- 파일 관리 : 파일의 생성과 삭제, 변경, 유지 등의 관리
	
	
5. Windows 특징
	- 선점형 멀티태스킹
		> 동시에 여러 개의 프로그램을 실행하는 멀티태스킹을 하면서 운영체제가 각 작업의 CPU 이용 시간을 제어하여
		응용 프로그램 실행 중 문제가 발생하면 해당 프로그램을 강제 종료하고 모든 자원을 반환
	- PnP
		> 하드웨어를 설치할 때 해당 하드웨어를 사용하는데 필요한 시스템 환경을 운영체제가 자동으로 구성해주는 기능	
	- OLE
		> 다른 응용프로그램에서 작성된 문자나 그림 등의 개체를 현재 작성 중인 문서에 자유롭게 연결하거나 편집할 수 있는 기능.
	- Single User 시스템
		> 컴퓨터를 한 사람이 독점하여 사용.
	
	
6. UNIX 특징
	- 시분할 시스템을 위해 설계된 대화식 운영체제
	- 소스코드가 개방형 시스템으로 구성
	- 대부분 C언어로 작성되어 이식성이 높으며 장치, 프로세스 간 호환성이 높음
	- 다중 사용자 및 다중 작업을 지원
	- 트리 구조의 파일 시스템
	
	UNIX 시스템구성
		사용자 - 유틸리티 - 쉘 - 커널 - 하드웨어
	
	- 커널
		> 컴퓨터가 부팅될 때 주기억장치에 적재된 후 상주하면서 실행됨.
		> 하드웨어를 보호하고 프로그램과 하드웨어 간의 인터페이스 역할을 담당.
		> 프로세스 관리, 기억장치 관리, 파일 관리, 입출력 관리, 프로세스 간 통신, 데이터 전송 및 변환 등 여러 가지 기능 수행.
	
	- 쉘
		> 명러어를 인식하여 수행하는 명령어 해석기
		> 시스템과 사용자 간의 인터페이스 담당.
		> 주기억장치에 상주하지 않고 명령어가 포함된 파일 형태로 존재
		> 보조기억장치에서 교체 처리 가능
		> 파이프라인 기능 지원
			: 둘 이상의 명령을 함께 묶어 처리한 결과를 다른 명령의 입력으로 전환하는 기능
	
	- 유틸리티
		> 사용자가 작성한 외부 프로그램을 처리
		> DOS에서의 외부 명령어에 해당
		> 에디터, 컴파일러, 인터프리터, 디버거...
		
7. LINUX의 특징
	- 프로그램 소스 코드가 무료로 공개되어 있어 사용자가 원하는 기능을 추가할 수 있고
	다양한 플랫폼에 설치하여 사용이 가능하며 재배포 가능
	- UNIX와 완벽호환
	- 대부분의 특징이 UNIX와 동일
	
8. 저장장치 관리의 개요
	- 레지스터 - 캐시 기억장치 - 주기억장치 - 보조기억장치
	
	-기억장치의 관리 전략의 개요 (3치)
		- Fetch (반입)
			> 보조기억장치에 보관중인 데이터를 언제 주기억장치에 적재할 것인지를 결정하는 전략
			> 요구 반입 : 실행중인 프로그램이 특정 프로그램이나 데이터 등의 참조를 요구할 때 적재
			> 예상 반입 : 실행중인 프로그램에 의해 참조될 프로그램이나 데이터를 미리 예상하여 적재
		- Placement (배치)
			> 새로 반입되는 데이터를 주기억장치의 어디에 위치시킬 것인지를 결정하는 전략
			> 최초 적합(First Fit) : 배치가 가능한 크기의 빈 영역 중에서 첫 번째 분할 영역에 배치
			> 최적 적합(Best Fit) : 배치가 가능한 크기의 빈 영역 중에서 단편화를 가장 적게 남기는 분할 영역에 배치
			> 최악 적합(Worst Fit) : 배치가 가능한 크기의 빈 영역중에서 단편화를 가장 많이 남기는 분할 영역에 배치
			> 단편화
				내부 단편화 : 배치 후 남은 공간
				외부 단편화 : 배치를 못 해 빈공간으로 남아있는 공간
		- Replacement (재배치)
			> 주기억장치의 모든 영역이 이미 사용 중인 상태에서 새로운 프로그램이나 데이터를 배치하려고 할 때,
			이미 사용 중인 영역에서 어느 영역을 교체할 것인지 결정하는 전략.
			
9. 주기억장치 할당 기법
	- 연속 할당 기법
		> 프로그램을 주기억장치에 연속으로 할당하는 기법
		> 단일 분할 할당 기법 : 주기억장치를 운영체제 영역과 사용자 영역으로 나누어 한 순간에는 오직 한 명의 사용자만이 사용자 영역을 사용
			- 오버레이
				> 주기억장치보다 큰 사용자 프로그램을 실행하기 위한 기법
				> 보조기억장치에 저장된 하나의 프로그램을 여러개의 조각으로 분할한 후 필요한 조각을 차례로 주기억장치에 적재하여 실행
			- 스와핑
				> 하나의 프로그램 전체를 주기억장치에 할당하여 사용하다 필요에 따라 다른 프로그램과 교체하는 기법
		> 다중 분할 할당 기법
			> 고정 분할 할당 기법
				- 프로그램에 할당하기 전에 운영체제가 주기억장치의 사용자 영역을 여러 개의 고정된 크기로 분할하고
				준비상태 큐에서 준비 중인 프로그램을 각 영역에 할당하여 수행
			> 동적 분할 할당 기법
				- 미리 주기억장치에 분할해 놓는 것이 아닌 프로그램을 주기억장치에 적재하면서 필요한 만큼의 크기로 영역을 분할
	- 분산 할당 기법
		> 프로그램을 특정 단위의 조각으로 나뉘어 주기억장치 내에 분산하여 할당하는 기법
		> 가상 기억장치의 개요
			- 보조기억장치의 일부를 주기억장치처럼 사용하는 것
			- 연속 할당 방식에서 발생할 수 있는 단편화를 해결할 수 있음.
			1) 페이징 기법
				- 가상기억장치의 보관되어 있는 프로그램과 주기억장치의 영역을 동일한 크기로 나눈 후
				나눠진 프로그램을 동일하게 나눠가진 주기억장치의 영역에 적재하여 실행하는 기법
				- 페이지
					> 프로그램을 일정한 크기로 나눈 크기
				- 프레임
					> 일정하게 나누어진 주기억장치의 단위
				- 외부 단편화는 발생하지 않으나 내부 단편화는 발생할 수 있음
				- Mapping 작업을 위해 페이지 맵 테이블이 필요함
			2) 세그먼트 기법
				- 가상기억장치에 보관되어 있는 프로그램을 다양한 크기의 논리적인 단위로 나눈 후 주기억장치에 적재시켜 실행하는 방법
				- 프로그램을 논리적인 크기로 나눈 단위를 세그먼트라고 함
				- Mapping 작업을 위해 세그먼트 맵 테이블이 필요함
				- 세그먼트가 주기억장치에 적재될 때 다른 세그먼트에게 할당된 영역을 침범할 수 없으며 이를 위해 기억장치 보호키가 필요.
				
	- 가상 메모리
		> 고정 크기 분할 : 페이지
		> 가변 크기 분할 : 세그먼트
		