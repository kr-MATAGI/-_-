- 컴파일러는 전체 소스코드를 보고 명령어를 수집하고 재구성
반면 인터프리터는 소스코드의 각 행을 연속적으로 분석하며 실행한다.

* 컴파일(Compile)
	- 프로그래밍 언어를 Runtime 이전에 기계어로 해석하는 작업.
	- 원래의 소스 코드를 원시 코드, 바뀐 코드를 목적 코드라 한다.
	- Runtime 이전에 어셈블리 언어로 변환하기 때문에 구동 시간이 오래 걸리지만,
	 구동된 이후에는 하나의 패키지로 매우 빠르게 작동하게 된다.
	- OS 및 빌드 환경에 종속적이다.
	- 자바 역시 Byte Code로 바꾸기 위한 과정에서 컴파일을 수행한다.

* 인터프리트(Interpret)
	- Runtime 이후에 Row 단위로 해석하며 프로그램을 구동시킨다.
	- 프로그래밍 언어를 기계어로 바꾸지 않고 중간 단계를 거친 뒤, Runtime에 즉시 해석한다.
	- Runtime에 직접 코드를 구동시키는 특징이 있어 실제 실행시간은 느리며
	 대신 Runtime에 실시간 디버깅 및 코드 수정이 가능하다.
	- 또한 메모리를 할당받아 수행되지 않으며, 필요할 때 할당하여 사용한다.
	- 가상 머신이 OS환경들을 지원해줌으로써 OS 및 플랫폼에 종속되지 않는 프로그램 구동이 가능하다.

1.
	- 컴파일러는 소스코드 전체를 한 번 훑고 컴퓨터 프로세서가 실행할 수 있도록 바로 기계어로 변환.
	- 인터프리터는 고레벨 언어를 중간 코드로 변환하고 이를 각 행마다 실행한다.
	(중간 코드는 다른 프로그램에 의해 실행된다.)
	
2.
	- 일반적으로 컴파일러가 각 행마다 실행하는 특성을 가진 인터프리터보다는 실행시간이 빠르다.

3.
	- 컴파일러는 전체 소스코드를 변환 한 뒤 에러를 보고하지만
	- 인터프리터는 각 행마다 실행하는 도중 에러가 보고되면 이후 작성된 코드를 살펴보지 않는다.
		(이는 보안적인 관점에 도움이된다.)
	