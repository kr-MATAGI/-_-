1. Field member
	- 필드란 클래스에 변수를 정의하는 공간을 의미한다.
	- 이곳에 변수를 만들어두면 메소드끼리 변수를 주고 받는데 있어서 참조하기 쉬우므로 정말 편리한 공간 중 하나이다.
	- 객체가 여러 스레드에 접근하는 싱글톤 객체라면 field 에서 상태값을 갖고 있으면 안된다.
		> 모든 변수를 parameter 로 넘겨받고 return 하는 방식으로 코드를 구성해야한다.
		

2. 동기화(Synchronized)
	- 필드에 Collection이 불가피하게 필요할 때
		Java에서는 synchronized 키워드를 사용하여 스레드 간 race condition을 통제한다.
	- 이 키워드를 기반으로 구현된 Collection들도 많이 존재한다.
		> List를 대신해서 Vector를 사용할 수 있고,
		Map을 대신하여 HashTable을 사용할 수 있따.
		하지만 이 Collection 들은 제공하는 API가 적고 성능도 좋지 않다.
	- 기본적으로는 Collections라는 util 클래스에서 제공되는 static 메소드를 통해 해결할 수 있따.
		Collections.synchroziedList()
		Collections.synchroziedSet(),
		Collections.synchroziedMap()
		
	
3. Thread Local
	- 스레드 사이에 간섭이 없어야 하는 데이터에 사용한다.
	- 멀티 스레드 환경에서는 클래스의 필드에 멤버를 추가할 수 없고 매개변수로 넘겨받아야 하기 때문이다.
	즉, 스레드 내부의 싱글톤을 사용하기 위해 사용한다.
	- 스레드 풀 환경에서 ThreadLocal 을 사용하는 경우 ThreadLocal 변수에 보관된 데이터의 사용이 끝나면
	반드시 해당 데이터를 삭제해주어야 한다. 그렇지 않을 경우 재사용되는 스레드가 올바르지 않은 데이터를 참조할 수 있다.
	
	- ThreadLocal 을 사용하는 방법
		1) ThreadLocal 객체를 생성한다.
		2) ThreadLocal.set() 메서드를 이용해 현재 스레드의 로컬 변수에 값을 저장한다.
		3) ThreadLocal.get() 메서드를 이용해 현재 스레드의 로컬 변수 값을 가져온다.
		4) ThreadLocal.remove() 메서드를 이용해 현재 스레드의 로컬 변수 값을 삭제한다.
	