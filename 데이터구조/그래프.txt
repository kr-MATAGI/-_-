1. 그래프
	- 트리는 사이클을 허용하지 않은 그래프
	
2. Undirected 그래프, Directed Graph
	- 방향성이 있는지 없는지의 차이
	
3. Degree
	- 각 정점에 연결된 Edge의 개수
	- Directed 그래프에는 방향성이 존재하기 때문에 
		> 각 정점으로 나가는 간선의 개수를 outdegree
		> 각 정점으로 들어오는 간선의 개수를 indegree


4. 가중치 그래프와 부분 그래프
	- 가중치 그래프
		> 간선에 가중치 정보를 두어서 구성한 그래프
	
	- 부분 그래프
		> 본래의 그래프의 일부 정점 및 간선으로 이루어진 그래프

		
5. 그래프를 구현하는 2개의 방법
	1) 인접 행렬 : 정방 행렬을 사용하는 방법
		- 해당하는 위치의 Value 값을 통해서 vertex 간의 연결관계를 O(1)로 파악할 수 있다.
		- Edge 개수와는 무관하게 정점(V)^2의 공간 복잡도를 갖는다
	
	2) 인접 리스트 : 연결 리스트를 사용하는 방법
		- 정점의 adjacent list를 확인해야 하므로 정점간 연결되어있는지 확인이 오래걸린다.
		- 공간복잡도는 O(정점 + 간선)이다.
		- Sparse Graph를 표현하는데 적절한 방법이다.
		
6. 그래프 탐색 방법
	1) DFS (Stack)
		- 그래프 상에 존재하는 임의의 한 정점으로부터 연결되어 있는 한 정점으로만 나아간다라는 방법을 우선으로 탐색.
		- 연결할 수 있는 정점이 있을 때까지 계속 연결하다가 더 이상 연결되지 않은 정점이 없으면 바로
		 그 전 단계의 정점으로 도아가서 연결할 수 있는 정점이 있는지 사렾본다.
		- 갔던 길을 되돌아 오는 상황이 미로찾기와 비슷하다.
		- 시간 복잡도 : O(정점 수 + 간선 수)
		
	2) BFS (Queue)
		- 그래프 상에 존재하는 임의의 한 정점으로부터 연결되어 있는 모든 정점으로 나아간다.
		- 정점들을 방문한 순서대로 queue에 저장하는 방법을 사용한다.
		- BFS로 구한 경로는 최단 경로이다.
		- 시간 복잡도 : O(정점 수 + 간선 수)

7. Spanning Tree
	- 그래프 G의 모든 vertex가 cycle 없이 연결된 형태
		
8. Minimum Spanning Tree
	- 그래프 G의 spanning tree 중 edge weight의 합이 최소인 spanning tree를 말한다.
	
9. Kruskal 알고리즘
	- 초기화 작업으로 edge 없이 vertex만으로 그래프를 구성한다.
	- weight가 제일 작은 edge부터 검토.
	- 가장 작은 weight에 해당하는 edge를 추가하는데 cycle이 생기지 않을 경우에만 추가
	- spanning tree가 완성되면 모든 vertex들이 연결된 상태로 종료가 되고
	 완성될 수 없는 그래프에 대해서는 모든 edge에 대해 판단이 이루어지면 종료한다.
	 
	- 시간 복잡도
		> Edge의 weight를 기준으로 정렬 - O(E logE)
		> cycle 생성 여부를 검사하고 set-id를 통일 - O(E + V log V)
		> 전체 : O(E logE)
		
10. Prim 알고리즘
	- 초기화 과정에서 한 개의 vertex로 이루어진 초기 그래프 A를 구성.
	- 그래프 A 내부에 있는 vertex로부터 외부에 있는 vertex 사이의 edge를 연결하는데
	 그 중 작은 weight의 edge를 통해 연결되는 vertex를 추가한다.
	  > 어떤 정점인지 상관없이 가중치를 기준으로 연결
	- 시간 복잡도 : O(E logV)
		
11. 다익스트라 알고리즘
	- https://mattlee.tistory.com/50