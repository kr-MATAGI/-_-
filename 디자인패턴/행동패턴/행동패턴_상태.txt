1. 상태(State)
	- 상태 자체를 객체화함으로써, 상태에 따른 액션도 상태 객체에 내부에 구현하는 패턴.
	
	- 상태의 종류가 많아 질수록 조건문도 많아지게 되고, 코드의 가독성이 떨어지게 된다는 단점을 보완하고자 상태 자체를 객체로 만들고 상태에 따른 액션도 이 객체에 포함시킨다.
	
	
2. 장점
	- 상태 종류 증가에 따른 길어지는 조건문을 제거하고, 가독성 좋게 코드를 짤 수 있다.
	- 상태 - 행위를 묶기 때문에 주체(클래스) 자체는 상태에 따른 행동 구현과 분리된다.
	
	
3. 단점
	- 상태 종류에 따라 클래스가 늘어난다.
	- 상태와 행동에 강력한 결합이 생긴다.
	
4. 활용 상황
	- 주체(클래스)에서 동일 계열의 상태들에 따라 조건문이 많아 지는 경우
	- 위 경우가 여러 클래스에서 등장하는 경우
	