1. 템플릿 메소드
	- 상위 클래스가 뼈대가 되는 로직을 구성하고,
	하위 클래스들이 이 로직의 요소들을 각각 구현하는 패턴이다.
	
	
2. 장점
	- 로직과 로직 요소를 분리하여, 전체 로직은 동일하되 로직 요소를 각각 다르게 할 수 있다.
	
3. 단점
	- 추상 클래스와 구현 클래스가 강하게 연결되어 있다.
	
	
4. 활용 상황
	- 같은 로직을 가지고 있는 알고리즘들을 큰 뼈대 / 작은 요소로 나누어 관리하기 쉬울 때
	- 명확한 로직이 있고, 로직에 들어가는 변수들을 잘 컴포넌트화 시킬 수 있는 경우.