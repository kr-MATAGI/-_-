1. 프록시
	- 객체를 통해 기본 객체에 접근하는 패턴
	
2. 장점
	- 기본 객체의 리소스가 무거운 경우, 프록시 객체에서 간단한 처리를 하거나
	 기본 객체를 캐싱 처리함으로써 부하를 줄일 수 있다.
	- 기본 객체에 대한 수정 없이, 클라이언트에서의 사용과 기본 객체 사이에
	 일련의 로직을 프록시 객체를 통해 넣을 수 있다.
	- 프록시는 기본 객체와 요청 사이에 있기 때문에 일종의 방패(보안)의 역할을 하기도 한다.
	- 구조나 코드 구현이 간단함.


3. 단점
	- 프록시 객체가 중간에 껴있기 때문에 간혹 응답이 느려질 수 있다.
		(캐싱이 안되어있는 초기 사용의 경우)
		
		
4. 활용 상황
	- 기본 객체가 리소스 집약적인 경우, 자잘한 작업들은 프록시 객체가 처리하게 한다.
	- 기본 객체에 접근을 제어해야 하는 경우, 프록시 객체가 권한에 따라 접근 로직을 다르게 처리하게 한다.
	