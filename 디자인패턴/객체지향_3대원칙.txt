1. 캡슐화
	- 객체의 필드, 메소드를 하나로 묶고, 실제 구현내용을 외부에 감추는 것.
	- 정보의 손상과 오용의 사전 방지
	- 다른 객체와의 독립성 유지로전체적인 코드 유지보수 및 변경에 유연
	
2. 상속
	- 기존 클래스를 재사용하는것
	- 개발시간 절약, 중복 코드 감소 및 유지보수에 용이해짐

3. 다형성
	- 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 하는 것.
	- 구체적으로는 부모 클래스 또는 인터페이스의 타입 변환, 오버로딩과 오버라이딩