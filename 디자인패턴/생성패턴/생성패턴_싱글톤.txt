1. 싱글톤
	- 애플리케이션에서 인스턴스를 단 하나만 만들어서 사용하기 위한 패턴
	- 커넥션 풀, 스레드 풀, 디바이스 설정 객체 등의 경우 인스턴스를 여러 개 만들면 자원을 낭비하게 되거나 버그를 발생시킬 수 있으므로 오직 하나만 생성하고 그 인스턴스를 사용하도록 하는 것이 이 패턴의 목적.
	
2. 싱글톤의 구현
	- 하나의 인스턴스만을 유지하기 위해 인스턴스 생성에 특별한 제약을 걸어둬야 한다
	- new 를 실행할 수 없도록 생성자에 private 접근자를 지정하고
	  유일한 단일 객체를 반환할 수 있도록 정적 메소드를 지원해야 한다.
	- 또한 유일한 단일 객체를 참조할 정적 참조변수가 필요하다.
	
	e.g)
	public class Singleton {
		private static volatile Singleton singletonObject = new Singleton();
		
		private Singletone() {}
		
		public static Singleton getSingletoneObject(){
			return sigletoneObject;
		}
	}


3. 싱글톤의 장점
	- 하나의 인스턴스를 사용
		-> 메모리 낭비를 방지 할 수 있다.
	- 전역 인스턴스
		-> 다른 클래스의 인스턴스들이 데이터를 공유
		
4. 싱글톤의 단점
	- 싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우,
	 SOLID 원칙 중 SRP, OCP 원칙에 위배됨
		-> 즉, 수정과 테스트가 어려워져 꼭 필요한 경우가 아니면 사용하지 않아야 함.