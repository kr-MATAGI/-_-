1. 팩토리 메소드
	- 인터스페이스로 객체들을 정의하고, 팩토리가 인스턴스를 생성하는 패턴.
	
	
2. 장점
	- 객체 생성하는 코드를 분리하여 클라이언트 코드와의 의존성을 낮춤.
		-> 코드에 변경이 필요할 시, 객체 생성 클래스만 수정하면 된다.
		
	- 인터페이스를 바탕으로 유연성과 확장성이 뛰어난 코드 제작이 가능
	
	- 객체의 자료형이 하위 클래스에 의해서 결정됨.
		-> 확장에 용이함
		-> 상위 클래스에서 그 객체의 정확한 타입을 몰라도 된다.
	
	- SOLID 원칙 중 DIP를 성립한다.
	
	
3. 단점
	- 새로 생성할 객체의 종류가 늘어날 때마다, 클래스가 많아짐
	
4. 활용상황
	- 딱히 구분할 것 없이 많이 사용되지만 대표적으로 자바 스프링 프레임워크