1. 쉘 스크립트(shell script)
	- 셸이나 명령 줄 인터프리터에서 돌아가도록 작성되었거나
	 한 운영체제를 위해 쓰인 스크립트.
	- 단순한 도메인 고유 언어로 여기기도 한다.
	- .sh라는 파일 확장자를 가진 파일이 특정 종류의 셸 스크립트를 가리키는 것이 보통이지만,
	대부분의 셸 스크립트는 파일 확장자를 지니지 않는다.
	
	
	- 장점
		- 셸 스크립트를 기록하는 것은 다른 프로그래밍 언어의 같은 코드로 쓰인 것보다
		 훨씬 더 빠른 경우가 많다.
		- 다른 언어 해석에 비해, 셸 스크립트는 컴파일 단계가 없기 때문에 스크립트는 디버깅을 하는 동안
		 빠르게 실행할 수 있다.
		 
	- 단점
		- 실행되는 각 명령에 대한 잠재적으로 새로운 하부 프로세스의 수많은 필요에 따라 속도가 느려질 수 있다.
		- 단순 sh 스크립트는 다양한 종류의 유닉스, 리눅스, BSD 운영체제, therof 버전, 시스템 유틸리티와 잘 호환된다는
		 장점이 있지만 더 복잡한 셸 스크립트는 셸, 유틸리티, 다른 필수 요소 간의 약간의 차이가 많은 경우 실패할 가능성이 있다.
		- 이와 비슷하게, 더 많은 복잡한 스크립트들은 셸 스크립트 언어 자체의 제한 안에서 실행할 수 있다.
		 이러한 제한 때문에 다양한 셸이 문제를 개선할 목적으로 고품질의 코드와 확장을 기록하기 힘들 수 있다.
		 
		 
2. 리눅스의 셸(Shell) - bash
	- 리눅스의 셸은 명령어와 프로그램을 실행할 때 사용하는 인터페이스.
	- 셸은 커널(Kernel)과 사용자간의 다리역할을 하는 것.
		> 사용자로부터 명령을 받아 그것을 해석하고 프로그램을 실행하는 역할.
	
	- GNU프로젝트를 위해 브라이언 폭스가 sh셸을 기반으로 개발.
		* GNU프로젝트 - 자유로운 소프트웨어를 희망하는 프로젝트
	- 프롬프트 
		> 일반 유저는 $ 프롬프트를 사용하고, root 유저는 # 프롬프트를 사용한다.
	- bash의 특징
		- Alias 기능 (명령어 단축 기능)
		- History 기능( 위로 아래로 방향키 입력시 명령어 히스토리)
		- 연산 기능
		- Job Control 기능
		- 자동 이름 완성 기능 (tab)
		- 프롬프트 제어 기능
		- 명령 편집 기능
		- etc...
	
	* 유닉스의 셸 - (Bourne Shell - sh)
		- 가장 큰 단점으로 상호 대화방식을 사용하지 않음.
		- 프롬프트 
			> 일반 유저는 $ 프롬프트를 사용하고, root 유저는 # 프롬프트를 사용한다.
		
3. 셸의 기능
	- 사용자와 커널 사이에서 명령을 해석해 전달하는 명령어 해석 기능이 있다.
	- 셸은 자체 내에 프로그래밍 기능이 있어서 프로그램을 작성할 수 있다.
	 셸 프로그래밍 기능을 이용하면 여러 명령을 사용해 반복적으로 수행하는 하나의 작업을 하나의 프로그램으로 제작할 수 있다.
		* 셸 프로그램 = 셸 스크립트
	- 사용자 환경 설정의 기능
		> 초기화 파일 기능을 이용해 사용자의 환경을 설정할 수 있다.
		> 로그인 할 때 이 초기화 파일이 실행되어서 사용자의 초기 환경이 설정된다.
		
		