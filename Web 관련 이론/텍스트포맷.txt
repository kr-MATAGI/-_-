1. 유니코드
	- 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준.
	- 이 표준에는 ISO 10646 문자 집합, 문자 인코딩, 문자 정보 데이터베이스, 문자들을 다루기 위한 알고리즘 등을 포함하고 있다.
	
	- 유니코드의 목적은 현존하는 문자 인코딩 방법들을 모두 유니코드로 교체하려는 것이다.
	 기존의 인코딩들은 그 규모나 범위 면에서 한정되어 있고, 다국어 환경에서는 서로 호환되지 않는 문제점들이 있었다.
	 유니코드가 다양한 문자들을 통합하는데 성공하면서 유니코드는 컴퓨터 소프트웨어의 국제화와 지역화에 널리 사용되게 되었으며,
	 비교적 최근의 기술인 XML, 자바, 그리고 최신 운영 체제 등에서도 지원하고 있다.

2. UTF8
	- 유니코드를 위한 가변 길이 문자 인코딩 방식.
	- 유니코드 한 문자를 나타내기 위해 1바이트에서 4바이트까지 사용한다.
		* U+0000부터 U+007F 범위에 있는 ASCII 문자들은 UTF-8에서 1바이트만 표시된다.
		* 4바이트로 표현되는 문자들은 모두 기본 다국어 평면(BMP) 바깥의 유니코드 문자이며, 거의 사용되지 않는다.
	- UTF16과 UTF8 중 어느 인코딩이 더 작은 바이트를 사용하는지 문자열 에서 사용된 코드 포인트에 따라 달라지며,
	 실제로 DEFLATE와 같은 일반적인 압축알고리즘을 사용할 경우 이 차이는 무시할 수 있다.
	- 이러한 압축 알고리즘을 사용하기 힘들고 크기가 중요할 경우 유니코드 표준 압축 방식을 대신 사용할 수 있다.
	
	- 변형된 UTF-8
		- 자바는 내부적으로 문자열을 UTF16인코딩으로 저장하며, 문자열 직렬화를 위하여 UTF8을 사용하고 있다. 이를 변형된 UTF8이라고 한다.
		- 표준 UTF8과 차이는 크게 두 가지로, U+0000을 1바이트가 아니라 2바이트, 즉 11000000 10000000으로 표현하는 것이다.
		 따라서 수정된 UTF8에서는 인코딩된 문자열에 널 문자가 나타나지 않게 되며,
		 따라서 널 문자를 문자열 끝으로 사용하는 C와 같은 언어에서 처리할 때 문자열이 잘리는 것을 막을 수 있다.
	

3. ASCII
	- 영문 알파벳을 사용하는 대표적인 문자 인코딩.
	- 컴퓨터와 통신 장비를 비롯한 문자를 사용하는 많은 장치에서 사용되며, 대부분의 문자 인코딩이 아스키에 기초를 두고 있다.
	- 아스키는 7비트 인코딩으로, 33개의 출력 불가능한 제어문자는과 공백을 비롯한 95개의 출력 가능한 문자들로 총 128개로 이루어진다.
		* 제어 문자들은 역사적인 이유로 남아있으며 대부분은 더 이상 사용되지 않는다.
		* 출력가능한 문자들은 52개의 영문 알파벳 대소문자와 10개의 숫자, 32개의 특수 문자 그리고 하나의 공백으로 이루어진다.