1. 여러 가지 변수 초기화 방법
	- 복사 초기화
		- int value = 5;
	- 직접 초기화
		- int value(5)
		- 직접 초기화는 함수 호출과 매우 유사하지만, 컴파일러는 어떤 이름이 변수이고 어떤 이름이 함수인지를 잘 추적하여
		 제대로 컴파일한다.
		- 직접 초기화는 일부 데이터 타입에서 복사 초기화보다 성능이 더 뛰어날 수 있다.
		 클래스에 관해 설명을 시작하면 다른 이점도 있다.
		 또한, 초기화와 할당을 구분하는 데도 구분이 된다.
		- 따라서 복사 초기화보다 직접 초기화를 사용하는 것이 좋다.
	
	- C++ 11의 유니폼 초기화
		- 중괄호({})를 사용한 유니폼 초기화
		- 복사 초기화 및 직접 초기화는 일부 타입 변수에 대해서만 작동한다.
		- 모든 데이터 타입에서 작동하는 단일 초기화 메커니즘을 제공하기 위해 C+11은
		 유니폼 초기화(uniform initialization)라는 새로운 형태의 메커니즘을 추가하였다. 
		 (brace initialization이라고도 한다.)
		
		e.g)
			int value{5};
			int value{} -> 기본 초기화가 된다.(변수를 0으로 초기화 한다.)
			int value{4.5} -> 유니폼 초기화는 형 변환을 허용하지 않는다는 이점이 있다.
							 변수를 다른 자료형의 값으로 초기화하려고 하면 컴파일러에서 경고 또는 오류가 발생한다.