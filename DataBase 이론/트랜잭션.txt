1. 트랜잭션(Transcation)
	- 작업의 완정성을 보장해주는 것.
	- 즉, 논리적인 작업 셋을 모두 완벽하게 처리하거나 또는 처리하지 못할 경우에 원 상태로 복구해서
	  작업의 일부만 적용되는 현상이 발생되지 않게 해주는 것.
	- 트랜잭션은 하나의 논리적인 작업 셋 중 하나의 쿼리가 있뜬 두 개 이상의 쿼리가 있든
	  관계없이 논리적인 작업 셋 자체가 100% 적용되거나 적용되지 않아야함을 보장.
	  
2. 트랜잭션의 특성
	1) 원자성(Automicity)
		- 트랜잭션 중간에 어떤 문제가 발생한다면 트랜잭션에 해당하는 어떠한 작업도 수행되어서는 안되며
		  아무런 문제가 발생되지 않았을 경우에만 모든 작업이 수행되어야 한다.
	
	2) 일관성(Consistency)
		- 트랜잭션이 완료된 다음의 상태에서도 트랜잭션이 일어나기 전의 상황과 동일하게 데이터의 일관성을 보장해야 한다.
		
	3) 고립성(Isolation)
		- 각각의 트랜잭션은 서로 간섭없이 독립적으로 수행되어야 한다.
	
	4) 지속성(Durability)
		- 트랜잭션이 정상적으로 종료된 다음에는 영구적으로 데이터베이스에 작업의 결과가 저장되어야 한다.
		
3. 트랜잭션의 상태
	1) Active
		- 트랜잭션의 활동 상태
		- 트랜잭션이 실행 중이며 동작 중인 상태
	
	2) Failed
		- 트랜잭션 실패 상태
		- 트랜잭션이 더 이상 정상적으로 동작될 수 없는 상태를 말한다.
		
	3) Partially Committed
		- 트랜잭션의 Commit 명령이 도착한 상태.
		- 트랜잭션의 Commit 이전 SQL 문이 수행되고 Commit 만 남은 상태
	
	4) Commited
		- 트랜잭션 완료 상태.
		- 트랜잭션이 정상적으로 완료된 상태
	
	5) Aborted
		- 트랜잭션이 취소된 상태
		- 트랜잭션이 취소되고 트랜잭션 실행 이전 데이터로 돌아간 상태
		
4. 트랜잭션을 사용할 때 주의할 점
	- 꼭 필요한 최소의 코드에만 적용하는 것이 좋다.
		> 트랜잭션의 범위를 최소화 하라.
	- 일반적으로 데이터베이스 커넥션은 개수가 제한적이다.
	  그런데 각 단위 프로그램이 커넥션을 소유하는 시간이 길어진다면 사용 가능한 여유 커넥션의 개수는 줄어들게 된다.
	  그러다 어느 순간에는 각 단위 프로그램에서 커넥션을 가져가기 위해 기다려야 하는 상황이 발생할 수 있다.
	