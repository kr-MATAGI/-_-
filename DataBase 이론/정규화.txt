1. 정규화
	- 관계형 데이터베이스의 설계에서 중복을 최소화하게 데이터를 구조화하는 프로세스.
	- 함수적 종속성을 이용해서 연관성 있는 속성들을 분류하고, 각 릴레이션들에서 이상현상이 생기지 않도록하는 과정.
	- 중복된 정보로 인해 저장 공간을 낭비하게 되며, 갱신 이상이 발생하게 된다.
	- 동일한 정보를 한 릴레이션에는 변경하고 나머지 릴레이션에서는 변경하지 않는 경우 어느 것이 정확한지 알 수 없게 되어
	  이를 해결하기 위함.
	
2. 갱신 이상
	1) 삽입 이상(Insertion anomalies)
		- 원하지 않는 자료가 삽입되거나 삽입하는데 자료가 부족해 삽입이 되지 않는 문제점
	
	2) 삭제 이상(deletion anomalies)
		- 하나의 자료만 삭제하고 싶지만, 그 자료가 포함된 튜플 전체가 삭제됨으로서 원하지 않는 정보 손실이 발생하는 것.
		
	3) 수정(갱신) 이상(modification anomalies)
		- 정확하지 않거나 일부의 튜플만 갱신되어 정보가 모호해지거나 일관성이 없어져 정확한 정보 파악이 되지 않는 문제.
		

3. 정규형		
1) 제 1 정규형
	- 애트리뷰트의 도메인이 오직 원자값만을 포함하고 튜플의 모든 애트리뷰트가 도메인에 속하는 하나의 값을 가져야한다.
	- 즉, 복합 애트리뷰트, 다중값 애트리뷰트, 중첩 릴레이션 등 비 원자적인 애트리뷰트들을 허용하지 않는 릴레이션 형태.
	
2) 제 2 정규형
	- 모든 비주요 애트리뷰트들이 주요 애트리뷰트에 대해 완전 함수 종속적이면 제 2 정규형을 만족한다.
	- 완전 함수 종속이란
		X->Y라고 가정했을 때, X의 어떠한 애트리뷰트라도 제거하면 더 이상 함수 종속성이 성립하지 않는 경우
	- 즉, 키가 아닌 열들이 각각 후보키에 대해 결정되는 릴레이션 형태

3) 제 3 정규형
	- 어떠한 비주요 애트리뷰트도 기본키에 대해서 이행적을 종속되지 않으면 제 3 정규형을 만족한다고 볼 수 있다.
	- 이행적 함수 종속이란
		X->Y, Y->Z의 경우에 의해서 추론될 수 있는 X->Z의 종속관계
		
4) BCNF 정규형
	- 여러 후보 키가 존재하는 릴레이션에 해당하는 정규화 내용.
	- 복잡한 식별자 관계에 의해 발생하는 문제를 해결하기 위해 제 3 정규형을 보완하는데 의미가 있다.
	- 비주요 애트리뷰트가 후보키의 일부를 결정하는 분해 과정
	
	
	
4. 정규화의 장점
	1) 데이터베이스 변경 시 이상 현상을 방지할 수 있다.
	2) 데이터베이스 구조 확장 시 재 디자인을 최소화한다.
	3) 새로운 데이터 형의 추가로 인한 확장시 그 구조를 변경하지 않아도 되거나 일부만 변경해도 된다.
		> 응용 프로그램에 최소한의 영향만을 미치게 되며 응용 프로그램의 생명을 연장시킨다.
	4) 사용자에게 데이터 모델을 더욱 의미있게 제공한다.
	  정규화된 테이블들과 정규화된 테이블들간의 관계들은 현실 세계에서의 개념들과 그들간의 관계들을 반영한다.
	  
5. 정규화의 단점
	- 릴레이션의 분해로 인해 릴레이션 간의 JOIN연산이 많아진다.
		> 이로 인해 질의에 대한 응답시간이 느려질 수 있따.
	- 데이터의 중복 속성을 제거하고 결정자에 의해 동일한 의미의 일반 속성이 하나의 테이블로 집약되므로
	  한 테이블의 데이터 용량이 최소화 되는 효과가 있다.
	  따라서 정규화된 테이블은 데이터를 처리할 때 속도가 빨라질 수도 있고 느려질 수도 있는 특성이 있다.
	  
6. 반정규화
	- 정규화된 엔티티, 속성, 관계를 시스템의 성능 향상 및 개발과 운영의 단순화를 위해 중복 통합, 분리 등을
	  수행하는 데이터 모델링 기법 중 하나이다.
	- 디스크 I/O 량이 많아서 조회 시 성능이 저하되거나, 테이블끼리의 경로가 너무 멀어 조인으로 인한 성능 저하가 예상되거나
	  칼럼을 계산하여 조회할 때 성능이 저하될 것이 예상되는 경우 반정규화를 수행하게 된다.
	- 일반적으로 조회에 대한 처리 성능이 중요하다고 판단될 때 부분적으로 반정규화를 고려하게 된다.
	
	- 무엇이 반정규화의 대상이 되는가?
		1) 자주 사용되는 테이블에 액세스하는 프로세스의 수가 가장 많고, 항상 일정 범위만을 조회하는 경우
		2) 테이블에 대량의 데이터가 있고 대량의 범위를 자주 처리하는 경우, 성능 상으로 이슈가 있을 경우
		3) 테이블에 지나치게 조인을 많이 사용하게 되어 데이터를 조회하는 것이 기술적으로 어려울 경우
	
	- 반정규화 과정에서 주의할 점은
		- 반정규화를 과도하게 적용하다 보면 데이터의 무결성이 깨질 수 있다.
		- 또한, 입력/수정/삭제의 질의문에 대한 응답 시간이 늦어질 수 있다.
	
